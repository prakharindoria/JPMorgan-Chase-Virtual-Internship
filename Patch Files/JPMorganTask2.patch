From eb3440cd098141ed1c06794b2311ccf5e123d7c1 Mon Sep 17 00:00:00 2001
From: Prakhar Indoria <prakharindoria@gmail.com>
Date: Sat, 16 May 2020 16:02:52 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 24 +++++++++++++++++++-----
 src/Graph.tsx | 14 +++++++++++---
 2 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..86b16bc 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,20 +31,32 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+  if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+   let y = 0;
+    const interval = setInterval(() => {
//For streaming Continuosly 
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+       this.setState({
+          data: serverResponds,
+          showGraph: true,
+       });
+      });
+      y++;
+    if (y > 1000) {
//Every One Second Refresh rate
+        clearInterval(interval);
+     }
+   }, 100);
+  
   }
 
+
   /**
    * Render the App react component
    */
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..97a3375 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -31,8 +31,9 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidMount() {
+  console.log('rendering');
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem= document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -41,14 +42,21 @@ class Graph extends Component<IProps, {}> {
       timestamp: 'date',
     };
 
-    if (window.perspective && window.perspective.worker()) {
+    if (window.perspective) {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
+       console.log('change table');
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+       elem.setAttribute('view', 'y_line');
+     elem.setAttribute('column-pivots', '["stock"]');
+     elem.setAttribute('row-pivots', '["timestamp"]');
+     elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', '{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
+     
     }
   }
 
-- 
2.26.1.windows.1

